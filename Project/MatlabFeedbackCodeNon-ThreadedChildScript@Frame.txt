function sysCall_init()
    -- do some initialization here
    

    --Initializing time and state
    init_measure_state();
end

function sysCall_init()
    -- do some initialization here
    --Setting model parameters
    init_parameters();
    --Getting objects handles
    Pendulum = sim.getObjectHandle("Pendulum");
    RotatingArm = sim.getObjectHandle("RotatingArm");
    Frame = sim.getObjectHandle("Frame");
    Revolute1 = sim.getObjectHandle("Revolute1");
    Revolute2 = sim.getObjectHandle("Revolute2");
    --Initializing time and thetadot
    init_variables();
end

function sysCall_actuation()
    -- put your actuation code here
    electro_actuation();
    --No limit to the velocity
    velocity = sign(torque)*1000;
    -- Actuation Joint Setting
    -- The setJointForce receive the abs of a torque
    sim.setJointForce(Revolute1,math.abs(torque));
    -- We don't put any limit to velocity since we control the joint with torque
    sim.setJointTargetVelocity(Revolute1, velocity);
end

function sysCall_sensing() 
    --put your sensing code here
    measure_thetadot();
end

function measure_thetadot()--This code is in order to compute the back EMF
    frame2arm = sim.getObjectMatrix(RotatingArm,Frame);
    actual_time = sim.getSimulationTime();
    actual_theta = -math.atan2(frame2arm[4], frame2arm[8]);
    if(actual_theta*previous_theta<0) then
        if (math.abs(previous_theta)>1) then
            thetadot_abs = (math.abs((math.pi-math.abs(actual_theta)) + (math.pi -math.abs(previous_theta))))/(actual_time-previous_time);
            if actual_theta>0 then
                c_theta = c_theta - 1;
            else
                c_theta = c_theta + 1;
            end
        end
    end
    previous_theta = actual_theta;
    theta_correct = actual_theta + c_theta*2*math.pi;
    thetadot = (theta_correct - previous_theta_correct)/(actual_time-previous_time);
    previous_theta_correct = theta_correct;
    previous_time = actual_time;
    print("Angle theta is:", theta_correct);
end


function input_voltage(voltage) -- This function is called by Matlab
    Vm = voltage;
    if (Vm > Vmax) then
        Vm = Vmax;
    else
        if Vm < -Vmax then
            Vm = -Vmax;
        end
    end
end

function sign(x)
    if x >= 0 then
        return 1;
    else
        return -1;
    end
end

function electro_actuation() -- This function compute the torque
    torque = (eta__g*k__g*eta__m*k__t*(Vm-k__g*k__m*thetadot))/(r__m);
    if (torque ~= torque or torque == -1/0 or torque == 1/0) then
        --print("Warning ", c_limit,": Limited Torque Applied");
        --c_limit = c_limit + 1;
        torque = 0;
    end

end

function reset_state()
    c_theta = 0;
    previous_theta_correct = -math.atan2(frame2arm[4], frame2arm[8])+0.01;
end

function init_parameters()
    --Electrical Parameters
    --High gear total gear ratio
    k__g = 70;
    --Motor Current Torque
    k__t = 0.0076;
    --Motor back-emf constant
    k__m = 0.0076;
    --Gearbox efficency
    eta__g = 0.85;
    --Motor efficiency
    eta__m = 0.87;
    --Motor Resistance
    r__m = 2.6;
    --Maximum Voltage
    Vmax = 10;
    c_theta = 0;
    c_limit = 0;
end

function init_variables()
    frame2arm = sim.getObjectMatrix(RotatingArm,Frame);
    previous_time = sim.getSimulationTime()-0.01;
    previous_theta = -math.atan2(frame2arm[4], frame2arm[8])-0.01;
    --Parameter for eletromechanical actuation
    previous_theta_correct = previous_theta;
    thetadot = 0;
end




